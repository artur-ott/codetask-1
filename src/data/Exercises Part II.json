{
  "id": 8,
  "title": "Exercises Part II",
  "chapters": [
    {
      "id": 11,
      "title": "Maps",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Maps can be created easily",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "4"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Maps contain distinct pairings",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "3"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Maps can be added to easily",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\n\nval aNewMap = myMap + (\"IL\" -> \"Illinois\")\n\naNewMap.contains(\"IL\") should be(__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Map values can be iterated",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\")\n\nval mapValues = myMap.values\n\nmapValues.size should be(__)\n\nmapValues.head should be(__)\n\nval lastElement = mapValues.last\nlastElement should be(__)\n\n// for (mval <- mapValues) println(mval)\n\n// NOTE that the following will not compile, as iterators do not implement \"contains\"\n//mapValues.contains(\"Illinois\") should be (__)",
            "mode": "scala",
            "solutions": [
              "3",
              "\"Michigan\"",
              "\"Wisconsin\"",
              "true"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "Maps insertion with duplicate key updates previous entry with subsequent value",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"MI\" -> \"Meechigan\")\n\nval mapValues = myMap.values\n\nmapValues.size should be(__)\n\nmyMap(\"MI\") should be(__)",
            "mode": "scala",
            "solutions": [
              "3",
              "\"Meechigan\""
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "Map keys may be of mixed type",
            "code": "val myMap = Map(\"Ann Arbor\" -> \"MI\", 49931 -> \"MI\")\nmyMap(\"Ann Arbor\") should be(__)\nmyMap(49931) should be(__)",
            "mode": "scala",
            "solutions": [
              "\"MI\"",
              "\"MI\""
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "Mixed type values can be added to a map ",
            "code": "val myMap = scala.collection.mutable.Map.empty[String, Any]\nmyMap(\"Ann Arbor\") = (48103, 48104, 48108)\nmyMap(\"Houghton\") = 49931\n\nmyMap(\"Houghton\") should be(__)\nmyMap(\"Ann Arbor\") should be(__)\n\n// what happens if you change the Any to Int\n// the entry Ann Arbor does not compile anymore as this is a List[Int] type and not Int",
            "mode": "scala",
            "solutions": [
              "49931",
              "(48103, 48104, 48108)"
            ]
          }
        },
        {
          "id": "koan8",
          "tag": "koan-task",
          "data": {
            "description": "Maps may be accessed",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap(\"MI\") should be(__)\nmyMap(\"IA\") should be(__)",
            "mode": "scala",
            "solutions": [
              "\"Michigan\"",
              "\"Iowa\""
            ]
          }
        },
        {
          "id": "koan9",
          "tag": "koan-task",
          "data": {
            "description": "Map elements can be removed easily",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - \"MI\"\naNewMap.contains(\"MI\") should be(__)",
            "mode": "scala",
            "solutions": [
              "false"
            ]
          }
        },
        {
          "id": "koan10",
          "tag": "koan-task",
          "data": {
            "description": "Accessing a map by key results in an exception if key is not found",
            "code": "val myMap = Map(\"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\n\n// Cheat Code (because this is hard to illustrate): uncomment the intercept code to make this pass\nintercept[NoSuchElementException] {\n  myMap(\"MI\") should be(__)\n}",
            "mode": "scala",
            "solutions": [
              "Nil"
            ]
          }
        },
        {
          "id": "koan11",
          "tag": "koan-task",
          "data": {
            "description": "Map elements can be removed in multiple",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\n\nval aNewMap = myMap -- List(\"MI\", \"OH\")\n\naNewMap.contains(\"MI\") should be(__)\n\naNewMap.contains(\"WI\") should be(__)\naNewMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "true",
              "2"
            ]
          }
        },
        {
          "id": "koan12",
          "tag": "koan-task",
          "data": {
            "description": "Map elements can be removed with a tuple",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - (\"MI\", \"WI\") // Notice: single '-' operator for tuples\n\naNewMap.contains(\"MI\") should be(__)\naNewMap.contains(\"OH\") should be(__)\naNewMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "true",
              "2"
            ]
          }
        },
        {
          "id": "koan13",
          "tag": "koan-task",
          "data": {
            "description": "Attempted removal of nonexistent elements from a map is handled gracefully",
            "code": "val myMap = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval aNewMap = myMap - \"MN\"\n\naNewMap.equals(myMap) should be(__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan14",
          "tag": "koan-task",
          "data": {
            "description": "Map equivalency is independent of order",
            "code": "val myMap1 = Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nval myMap2 = Map(\"WI\" -> \"Wisconsin\", \"MI\" -> \"Michigan\", \"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\n\nmyMap1.equals(myMap2) should be(__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        }
      ]
    },
    {
      "id": 12,
      "title": "Mutable Sets",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can be created easily",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Ohio\", \"Wisconsin\", \"Iowa\")\nmySet.size should be(__)\nmySet += \"Oregon\"\nmySet contains \"Oregon\" should be(__)",
            "mode": "scala",
            "solutions": [
              "4",
              "true"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can have elements removed",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Ohio\", \"Wisconsin\", \"Iowa\")\nmySet -= \"Ohio\"\nmySet contains \"Ohio\" should be(__)",
            "mode": "scala",
            "solutions": [
              "false"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can have tuples of elements removed",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Ohio\", \"Wisconsin\", \"Iowa\")\nmySet -= (\"Iowa\", \"Ohio\")\nmySet contains \"Ohio\" should be(__)\nmySet.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "2"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can have tuples of elements added",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Wisconsin\")\nmySet += (\"Iowa\", \"Ohio\")\nmySet contains \"Ohio\" should be(__)\nmySet.size should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "4"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can have Lists of elements added",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Wisconsin\")\nmySet ++= List(\"Iowa\", \"Ohio\")\nmySet contains \"Ohio\" should be(__)\nmySet.size should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "4"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can have Lists of elements removed",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Ohio\", \"Wisconsin\", \"Iowa\")\nmySet --= List(\"Iowa\", \"Ohio\")\nmySet contains \"Ohio\" should be(__)\nmySet.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "2"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "Mutable sets can be cleared",
            "code": "val mySet = mutable.Set(\"Michigan\", \"Ohio\", \"Wisconsin\", \"Iowa\")\nmySet.clear() // Convention is to use parens if possible when method called changes state\nmySet contains \"Ohio\" should be(__)\nmySet.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "0"
            ]
          }
        }
      ]
    },
    {
      "id": 13,
      "title": "Mutable Maps",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can be created easily",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.size should be(__)\nmyMap += \"OR\" -> \"Oregon\"\nmyMap contains \"OR\" should be(__)",
            "mode": "scala",
            "solutions": [
              "4",
              "true"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can have elements removed",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap -= \"OH\"\nmyMap contains \"OH\" should be(__)",
            "mode": "scala",
            "solutions": [
              "false"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can have tuples of elements removed",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap -= (\"IA\", \"OH\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "2"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can have tuples of elements added",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"WI\" -> \"Wisconsin\")\nmyMap += (\"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "4"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can have Lists of elements added",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"WI\" -> \"Wisconsin\")\nmyMap ++= List(\"IA\" -> \"Iowa\", \"OH\" -> \"Ohio\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "4"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can have Lists of elements removed",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap --= List(\"IA\", \"OH\")\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "2"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "Mutable maps can be cleared",
            "code": "val myMap = mutable.Map(\"MI\" -> \"Michigan\", \"OH\" -> \"Ohio\", \"WI\" -> \"Wisconsin\", \"IA\" -> \"Iowa\")\nmyMap.clear() // Convention is to use parens if possible when method called changes state\nmyMap contains \"OH\" should be(__)\nmyMap.size should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "0"
            ]
          }
        }
      ]
    },
    {
      "id": 14,
      "title": "Range",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Range are not inclusive at end of range",
            "code": "val someNumbers = Range(0, 10)\n\nsomeNumbers.size should be(__)",
            "mode": "scala",
            "solutions": [
              "10"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Range can specify a step for an increment",
            "code": "val someNumbers = Range(2, 10, 3)\n\nsomeNumbers.size should be(__)",
            "mode": "scala",
            "solutions": [
              "3"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Range doed not include the last item, even in a step increment",
            "code": "val someNumbers = Range(0, 34, 2)\nsomeNumbers.contains(33) should be(__)\nsomeNumbers.contains(32) should be(__)\nsomeNumbers.contains(34) should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "true",
              "false"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Range can specify to include the last value",
            "code": "val someNumbers = Range(0, 34).inclusive\n\nsomeNumbers.contains(34) should be(__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        }
      ]
    },
    {
      "id": 15,
      "title": "For Expressions",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "For loops can be simple",
            "code": "val someNumbers = Range(0, 10) // non-inclusive on the upper bound\nvar sum = 0\nfor (i <- someNumbers)\n  sum += i\n\nsum should equal(__)",
            "mode": "scala",
            "solutions": [
              "45"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "For loops can contain additional logic",
            "code": "val someNumbers = Range(0, 10)\nvar sum = 0\n// sum only the even numbers\nfor (i <- someNumbers)\n  if (i % 2 == 0) sum += i\n\nsum should equal(__)",
            "mode": "scala",
            "solutions": [
              "20"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "For expressions can nest, with later generators varying more rapidly than earlier ones",
            "code": "val xValues = Range(1, 5)\nval yValues = Range(1, 3)\nval coordinates = for {\n  x <- xValues\n  y <- yValues\n}\nyield (x, y)\ncoordinates(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "(3, 1)"
            ]
          }
        }
      ]
    },
    {
      "id": 16,
      "title": "Tuples",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Tuples can be created easily",
            "code": "val tuple = (\"apple\", \"dog\")\ntuple should be(__)",
            "mode": "scala",
            "solutions": [
              "(\"apple\", \"dog\")"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Tuple items may be accessed individually",
            "code": "val tuple = (\"apple\", \"dog\")\nval fruit = tuple._1\nval animal = tuple._2\n\nfruit should be(__)\nanimal should be(__)",
            "mode": "scala",
            "solutions": [
              "\"apple\"",
              "\"dog\""
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Tuples may be of mixed type",
            "code": "val tuple5 = (\"a\", 1, 2.2, new Date(), BigDecimal(5))\n\ntuple5._2 should be(__)\ntuple5._5 should be(__)",
            "mode": "scala",
            "solutions": [
              "1",
              "BigDecimal(5)"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Tuples items can be swapped on a Tuple 2",
            "code": "val tuple = (\"apple\", 3).swap\ntuple._1 should be(__)\ntuple._2 should be(__)",
            "mode": "scala",
            "solutions": [
              "3",
              "\"apple\""
            ]
          }
        }
      ]
    },
    {
      "id": 17,
      "title": "Options",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Option can have one of two values - Some or None",
            "code": "val someValue: Option[String] = Some(\"I am wrapped in something\")\nsomeValue.get should be(__)\n\nval nullValue: Option[String] = None\nnullValue should be(__)",
            "mode": "scala",
            "solutions": [
              "\"I am wrapped in something\"",
              "None"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Represent null with None because null is a bad idea",
            "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1.get should be(__)\nintercept[java.util.NoSuchElementException] {\n  value2.get\n}",
            "mode": "scala",
            "solutions": [
              "\"Found value\""
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Provide a default value for None",
            "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1 getOrElse \"No value\" should be(__)\nvalue2 getOrElse \"No value\" should be(__)\nvalue2 getOrElse {\n  \"default function\"\n} should be(__)",
            "mode": "scala",
            "solutions": [
              "\"Found value\"",
              "\"No value\"",
              "\"default function\""
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "checking whether option has value",
            "code": "val value1 = maybeItWillReturnSomething(true)\nval value2 = maybeItWillReturnSomething(false)\n\nvalue1.isEmpty should be(__)\nvalue2.isEmpty should be(__)",
            "mode": "scala",
            "solutions": [
              "false",
              "true"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "Option can also be used with pattern matching",
            "code": "val someValue: Option[Double] = Some(20.0)\nval value = someValue match {\n  case Some(v) => v\n  case None => 0.0\n}\nvalue should be(__)\nval noValue: Option[Double] = None\nval value1 = noValue match {\n  case Some(v) => v\n  case None => 0.0\n}\nvalue1 should be(__)",
            "mode": "scala",
            "solutions": [
              "20.0",
              "0.0"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "Option is more than just a replacement of null, its also a collection",
            "code": "Some(10) map { _ + 10} should be(__)\nSome(10) filter { _ == 10} should be(__)\nSome(Some(10)) flatMap { _ map { _ + 10}} should be(__)\n\nvar newValue1 = 0\nSome(20) foreach { newValue1 = _}\nnewValue1 should be(__)\n\nvar newValue2 = 0\nNone foreach { newValue2 = _}\nnewValue2 should be(__)",
            "mode": "scala",
            "solutions": [
              "Some(20)",
              "Some(10)",
              "Some(20)",
              "20",
              "0"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "Using Option to avoid if checks for null",
            "code": "//the ugly version\ndef makeFullName(firstName: String, lastName: String) = {\n  if (firstName != null) {\n    if (lastName != null) {\n      firstName + \" \" + lastName\n    } else {\n      null\n    }\n  } else {\n    null\n  }\n}\nmakeFullName(\"Nilanjan\", \"Raychaudhuri\") should be(__)\nmakeFullName(\"Nilanjan\", null) should be(__)\n\n//the pretty version\ndef makeFullNamePrettyVersion(firstName: Option[String], lastName: Option[String]) = {\n  firstName flatMap {\n    fname =>\n      lastName flatMap {\n        lname =>\n          Some(fname + \" \" + lname)\n      }\n  }\n}\nmakeFullNamePrettyVersion(Some(\"Nilanjan\"), Some(\"Raychaudhuri\")) should be(__)\nmakeFullNamePrettyVersion(Some(\"Nilanjan\"), None) should be(__)",
            "mode": "scala",
            "solutions": [
              "\"Nilanjan Raychaudhuri\"",
              "null",
              "Some(\"Nilanjan Raychaudhuri\")",
              "None"
            ]
          }
        },
        {
          "id": "koan8",
          "tag": "koan-task",
          "data": {
            "description": "Using in for comprehension",
            "code": "val values = List(Some(10), Some(20), None, Some(15))\nval newValues = for {\n  someValue <- values\n  value <- someValue\n} yield value\nnewValues should be(__)",
            "mode": "scala",
            "solutions": [
              "List(10, 20, 15)"
            ]
          }
        }
      ]
    },
    {
      "id": 18,
      "title": "Empty Values",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "None equals None",
            "code": "assert(None === __)",
            "mode": "scala",
            "solutions": [
              "None"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "None should be identical to None",
            "code": "val a = None\nval b = None\nassert(a eq __)",
            "mode": "scala",
            "solutions": [
              "b"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "None can be converted to a String",
            "code": "assert(None.toString === __)",
            "mode": "scala",
            "solutions": [
              "\"None\""
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "An empty list can be represented by another nothing value: Nil",
            "code": "assert(List() === __)",
            "mode": "scala",
            "solutions": [
              "Nil"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "None can be converted to an empty list",
            "code": "val a = None\nassert(a.toList === __)",
            "mode": "scala",
            "solutions": [
              "Nil"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "None is considered empty",
            "code": "assert(None.isEmpty === __)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "None can be cast Any, AnyRef or AnyVal",
            "code": "assert(None.asInstanceOf[Any] === __)\nassert(None.asInstanceOf[AnyRef] === __)\nassert(None.asInstanceOf[AnyVal] === __)",
            "mode": "scala",
            "solutions": [
              "None",
              "None",
              "None"
            ]
          }
        },
        {
          "id": "koan8",
          "tag": "koan-task",
          "data": {
            "description": "None cannot be cast to all types of objects",
            "code": "intercept[ClassCastException] {\n  // put the exception you expect to see in place of the blank\n  assert(None.asInstanceOf[String] === __)\n}",
            "mode": "scala",
            "solutions": [
              "false"
            ]
          }
        },
        {
          "id": "koan9",
          "tag": "koan-task",
          "data": {
            "description": "None can be used with Option instead of null references",
            "code": "val optional: Option[String] = None\nassert(optional.isEmpty === __)\nassert(optional === __)",
            "mode": "scala",
            "solutions": [
              "true",
              "None"
            ]
          }
        },
        {
          "id": "koan10",
          "tag": "koan-task",
          "data": {
            "description": "Some is the opposite of None for Option types",
            "code": "val optional: Option[String] = Some(\"Some Value\")\nassert((optional == None) === __, \"Some(value) should not equal None\")\nassert(optional.isEmpty === __, \"Some(value) should not be empty\")",
            "mode": "scala",
            "solutions": [
              "false",
              "false"
            ]
          }
        },
        {
          "id": "koan11",
          "tag": "koan-task",
          "data": {
            "description": "Option.getOrElse can be used to provide a default in the case of None",
            "code": "val optional: Option[String] = Some(\"Some Value\")\nval optional2: Option[String] = None\nassert(optional.getOrElse(\"No Value\") === __, \"Should return the value in the option\")\nassert(optional2.getOrElse(\"No Value\") === __, \"Should return the specified default value\")",
            "mode": "scala",
            "solutions": [
              "\"Some Value\"",
              "\"No Value\""
            ]
          }
        }
      ]
    },
    {
      "id": 19,
      "title": "Sequences and Arrays",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "A list can be converted to an array",
            "code": "val l = List(1, 2, 3)\nval a = l.toArray\na should equal(__)",
            "mode": "scala",
            "solutions": [
              "Array(1, 2, 3)"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Any sequence can be converted to a list",
            "code": "val a = Array(1, 2, 3)\nval s = a.toSeq\nval l = s.toList\nl should equal(__)",
            "mode": "scala",
            "solutions": [
              "List(1, 2, 3)"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "You can create a sequence from a for comprehension",
            "code": "val s = for (v <- 1 to 4) yield v\ns.toList should be(__)",
            "mode": "scala",
            "solutions": [
              "List(1, 2, 3, 4)"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "You can create a sequence from a for comprehension with a condition",
            "code": "val s = for (v <- 1 to 10 if v % 3 == 0) yield v\ns.toList should be(__)",
            "mode": "scala",
            "solutions": [
              "List(3, 6, 9)"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "You can filter any sequence based on a predicate",
            "code": "val s = Seq(\"hello\", \"to\", \"you\")\nval filtered = s.filter(_.length > 2)\nfiltered should be(__)",
            "mode": "scala",
            "solutions": [
              "Seq(\"hello\", \"you\")"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "You can also filter Arrays in the same way",
            "code": "val a = Array(\"hello\", \"to\", \"you\", \"again\")\nval filtered = a.filter(_.length > 3)\nfiltered should be(__)",
            "mode": "scala",
            "solutions": [
              "Array(\"hello\", \"again\")"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "You can map values in a sequence through a function",
            "code": "val s = Seq(\"hello\", \"world\")\nval r = s map {\n  _.reverse\n}\n\nr should be(__)",
            "mode": "scala",
            "solutions": [
              "Seq(\"olleh\", \"dlrow\")"
            ]
          }
        }
      ]
    },
    {
      "id": 20,
      "title": "Iterables",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Iterable is a trait that has the ability to return an iterator of itself.\n Some known iterators are Sets, Lists, Vectors, Stacks, and Streams. Iterator has two\n important methods:  `hasNext`, which answers whether the iterator has another element\n available. `next` which will return the next element in the iterator.",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21)\nval it = list.iterator\nif (it.hasNext) {\n  it.next should be(__)\n}",
            "mode": "scala",
            "solutions": [
              "3"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "`grouped` will return an fixed sized Iterable chucks of an Iterable",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list grouped 3\nit.next() should be(__)\nit.next() should be(__)\nit.next() should be(__)",
            "mode": "scala",
            "solutions": [
              "List(3, 5, 9)",
              "List(11, 15, 19)",
              "List(21, 24, 32)"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "`sliding` will return an Iterable that shows a sliding window of an Iterable.",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list sliding 3\nit.next() should be(__)\nit.next() should be(__)\nit.next() should be(__)",
            "mode": "scala",
            "solutions": [
              "List(3, 5, 9)",
              "List(5, 9, 11)",
              "List(9, 11, 15)"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "`sliding` can take the size of the window as well the size of the step during each\n iteration",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\nval it = list sliding(3, 3)\nit.next() should be(__)\nit.next() should be(__)\nit.next() should be(__)",
            "mode": "scala",
            "solutions": [
              "List(3, 5, 9)",
              "List(11, 15, 19)",
              "List(21, 24, 32)"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "`takeRight` is the opposite of 'take' in Traversable.  It retrieves the last elements\n of an Iterable. ",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\n(list takeRight 3) should be(__)",
            "mode": "scala",
            "solutions": [
              "List(21, 24, 32)"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "`dropRight` will drop the number of elements from the right. ",
            "code": "val list = List(3, 5, 9, 11, 15, 19, 21, 24, 32)\n(list dropRight 3) should be(__)",
            "mode": "scala",
            "solutions": [
              "List(3, 5, 9, 11, 15, 19)"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "`zip` will stitch two iterables into an iterable of pairs of corresponding elements\n  from both iterables. e.g. Iterable(x1, x2, x3) zip Iterable(y1, y2, y3) will\n  return ((x1,y1), (x2, y2), (x3, y3))",
            "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\", \"Stella\")\n(xs zip ys) should be(__)",
            "mode": "scala",
            "solutions": [
              "List((3, \"Bob\"), (5, \"Ann\"), (9, \"Stella\"))"
            ]
          }
        },
        {
          "id": "koan8",
          "tag": "koan-task",
          "data": {
            "description": "if two Iterables aren't the same size, then `zip` will only zip what can only be paired.\n  e.g. Iterable(x1, x2, x3) zip Iterable(y1, y2) will\n  return ((x1,y1), (x2, y2))",
            "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\")\n(xs zip ys) should be(__)",
            "mode": "scala",
            "solutions": [
              "List((3, \"Bob\"), (5, \"Ann\"))"
            ]
          }
        },
        {
          "id": "koan9",
          "tag": "koan-task",
          "data": {
            "description": "if two Iterables aren't the same size, then `zipAll` can provide filters for what it couldn't\n  find a complement for. e.g. Iterable(x1, x2, x3) zipAll (Iterable(y1, y2), x, y) will\n  return ((x1,y1), (x2, y2, y))",
            "code": "val xs = List(3, 5, 9)\nval ys = List(\"Bob\", \"Ann\")\n(xs zipAll(ys, -1, \"?\")) should be(__)",
            "mode": "scala",
            "solutions": [
              "List((3, \"Bob\"), (5, \"Ann\"), (9, \"?\"))"
            ]
          }
        },
        {
          "id": "koan10",
          "tag": "koan-task",
          "data": {
            "description": "`zipWithIndex` will zip an Iterable with it's integer index",
            "code": "val xs = List(\"Manny\", \"Moe\", \"Jack\")\nxs.zipWithIndex should be(__)",
            "mode": "scala",
            "solutions": [
              "List((\"Manny\", 0), (\"Moe\", 1), (\"Jack\", 2))"
            ]
          }
        },
        {
          "id": "koan11",
          "tag": "koan-task",
          "data": {
            "description": "`sameElements` will return true if the two iterables have the same number of elements",
            "code": "val xs = List(\"Manny\", \"Moe\", \"Jack\")\nval ys = List(\"Manny\", \"Moe\", \"Jack\")\n(xs sameElements ys) should be(__)\n\nval xs1 = Set(3, 2, 1, 4, 5, 6, 7)\nval ys1 = Set(7, 2, 1, 4, 5, 6, 3)\n(xs1 sameElements ys1) should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "true"
            ]
          }
        }
      ]
    }
  ]
}

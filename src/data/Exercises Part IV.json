{
  "id": 10,
  "title": "Exercises Part III",
  "chapters": [
    {
      "id": 30,
      "title": "Methods",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "In scala, methods can be placed inside in methods, this comes useful for\n recursion where accumulator helper methods can be placed inside the outer method",
            "code": "def factorial(i: Int): Int = {\n  def fact(i: Int, accumulator: Int): Int = {\n    if (i <= 1)\n      accumulator\n    else\n      fact(i - 1, i * accumulator)\n  }\n  fact(i, 1)\n}\n\nfactorial(3) should be (__)",
            "mode": "scala",
            "solutions": [
              "6"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "If a method does not of have equal it is considered `Unit` which is analogous to `void` in Java",
            "code": "def foo(x:Int) {\n  (x + 4)\n}\n\nfoo(5) should be (__)",
            "mode": "scala",
            "solutions": [
              "()"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "If you want to have an = on the method you can make the return type `Unit`,\n this also analogous to `void",
            "code": "def foo(x:Int):Unit = {\n  (x + 4)\n}\n\nfoo(3) should be (__)",
            "mode": "scala",
            "solutions": [
              "()"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "Once you have an =, it is understood that there will be a return type and can be inferred",
            "code": "def foo(x:Int) = 3 + 4\nfoo(3).isInstanceOf[Int] should be (__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "Of course if you wish to be explicit about the return type, you can attach it at the end of the method",
            "code": "def foo(x:Int):Int = 3 + 4\nfoo(3).isInstanceOf[Int] should be (__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "As an important concept in function programming and in Scala, a method is also a function",
            "code": "def foo(x:Int) = x * 2\nval result = List(1,2,3).map(foo) //map performs a function on each element\nresult should be (__)",
            "mode": "scala",
            "solutions": [
              "List(2,4,6)"
            ]
          }
        }
      ]
    },
    {
      "id": 31,
      "title": "Preconditions",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "On precondition violation, intercept expects type of exception thrown",
            "code": "intercept[IllegalArgumentException] {\n  val myInstance = new WithParameterRequirement(0)\n}\n\nval myInstance = new WithParameterRequirement(\"\")// does not break as we use the alternate constructor which discard the input and set the value 1 anyway",
            "mode": "scala",
            "solutions": []
          }
        }
      ]
    },
    {
      "id": 32,
      "title": "Recursion",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Methods can be embedded in other methods, this is particularly useful as helper methods for recursion.\n Also in Scala, any recursive method must have a return type.",
            "code": "//Reminder: 5! = 1 x 2 x 3 x 4 x 5 = 120\n\ndef factorial(i: Int): Int = {\n  def fact(i: Int, accumulator: Int): Int = {\n    if (i <= 1)\n      accumulator\n    else\n      fact(i - 1, i * accumulator)\n  }\n  fact(i, 1)\n}\n\nfactorial(0) should be(__)\nfactorial(1) should be(__)\nfactorial(2) should be(__)\nfactorial(3) should be(__)",
            "mode": "scala",
            "solutions": [
              "1",
              "1",
              "2",
              "6"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "As a precaution, the helpful @tailrec annotation will throw a compile time if a method is not tail recursive,\n meaning that the last call and only call of the method is the recursive method. Scala optimizes recursive calls\n to a loop from a stack",
            "code": "//    @tailrec   //Uncomment this like to see the result, then comment it again and answer the koan\n      // could not optimize @tailrec annotated method fibonacci: it contains a recursive call not in tail position fibonacci(n - 1) + fibonacci(n - 2)\n    def fibonacci(n: Int): Int = {\n      if (n <= 1)\n        1\n      else\n        fibonacci(n - 1) + fibonacci(n - 2)\n    }\n\n    //Reminder fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21\n    fibonacci(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "5"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "As properly tail recursive method will use an accumulator method so that the only call of a recursive method is the last one.\n just like the first koan above.",
            "code": "def fibonacci(n: Int) = {\n  @tailrec\n  def fib(n: Int, b: Int, a: Int): Int = n match {\n    case 0 => a\n    case _ => fib(n - 1, a + b, b)\n  }\n\n  fib(n, 1, 0)\n}\n\n//Reminder fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21\nfibonacci(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "3"
            ]
          }
        }
      ]
    },
    {
      "id": 33,
      "title": "Repeated Parameters",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "A repeated parameter can accept a collection as the last parameter but will be considered a single object",
            "code": "repeatedParameterMethod(3, \"egg\", List(\"a delicious sandwich\", \"protein\", \"high cholesterol\")) should be(__)",
            "mode": "scala",
            "solutions": [
              "\"3 eggs can give you List(a delicious sandwich, protein, high cholesterol)\""
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "A repeated parameter can accept a collection, and if you want it expanded, add :_*",
            "code": "repeatedParameterMethod(3, \"egg\", List(\"a delicious sandwich\", \"protein\", \"high cholesterol\"):_*) should be(__)",
            "mode": "scala",
            "solutions": [
              "\"3 eggs can give you a delicious sandwich, protein, high cholesterol\""
            ]
          }
        }
      ]
    },
    {
      "id": 34,
      "title": "By-Name Parameters",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "() => Int is a Function type that takes a Unit type and returns an Int.\n Unit is known as 'void' to a Java programmer.\n You can place this as a method parameter so that you can you use it as a block, but still\n it doesn't look quite right.",
            "code": "def calc(x: () => Int): Either[Throwable, Int] = {\n  try {\n    Right(x()) //An explicit call to the x function\n  } catch {\n    case b: Throwable => Left(b)\n  }\n}\n\nval y = calc {() => //Having explicitly declaring that Unit is a parameter with ()\n  14 + 15\n}\n\ny should be (__)",
            "mode": "scala",
            "solutions": [
              "Right(29)"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "A by-name parameter does the same thing as a previous koan but there is no need to explicitly\n handle Unit or (). This is used extensively in scala to create blocks.",
            "code": "def calc(x: => Int): Either[Throwable, Int] = {   //x is a call by name parameter\n  try {\n    Right(x)\n  } catch {\n    case b: Throwable => Left(b)\n  }\n}\n\nval y = calc {                                    //This looks like a natural block\n  println(\"Here we go!\")                          //Some superfluous call\n  val z = List(1, 2, 3, 4)                        //Another superfluous call\n  49 + 20\n}\n\ny should be (__)",
            "mode": "scala",
            "solutions": [
              "Right(69)"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "By name parameters can also be used with an Object and apply to make interesting block-like calls",
            "code": "object PigLatinizer {\n  def apply(x: => String) = x.tail + x.head + \"ay\"\n}\n\nval result = PigLatinizer {\n  val x = \"pret\"\n  val z = \"zel\"\n  x ++ z //concatenate the strings\n}\n\nresult should be (__)",
            "mode": "scala",
            "solutions": [
              "\"retzelpay\""
            ]
          }
        }
      ]
    },
    {
      "id": 35,
      "title": "Uniform Access Principle",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Can access age as parameterless method",
            "code": "val me = new CalculatesAgeUsingMethod(2010, 2003)\nme.age should be(__)",
            "mode": "scala",
            "solutions": [
              "7"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Can access age as property",
            "code": "val me = new CalculatesAgeUsingProperty(2010, 2003)\nme.age should be(__)",
            "mode": "scala",
            "solutions": [
              "7"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Cannot add parameter to Method invocation",
            "code": "val me = new CalculatesAgeUsingMethod(2010, 2003)\n// uncomment following line to see what happens if you try to access parameterless method with parens\n// me.age() should be (__) // Int does not take parameters",
            "mode": "scala",
            "solutions": [
              "7"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "What happens when I update current year using property",
            "code": "val me = new CalculatesAgeUsingProperty(2010, 2003)\n\nme.currentYear = 2011\nme.age should be(__) // me.age is computed at construction time so same as before",
            "mode": "scala",
            "solutions": [
              "7"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "What happens when I update current year using method",
            "code": "val me = new CalculatesAgeUsingMethod(2010, 2003)\n\n\nme.currentYear = 2011\nme.age should be(__) // here age is a method so called each time and take the update of var into account",
            "mode": "scala",
            "solutions": [
              "8"
            ]
          }
        }
      ]
    },
    {
      "id": 36,
      "title": "Partial Functions",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "A partial function is a trait that when\n implemented can be used as building blocks to determine\n a solution.  The trait PartialFunction requires that\n the method isDefinedAt and apply be implemented.",
            "code": "val doubleEvens: PartialFunction[Int, Int] = new PartialFunction[Int, Int] {\n  //States that this partial function will take on the task\n  def isDefinedAt(x: Int) = x % 2 == 0\n\n  //What we do if this does partial function matches\n  def apply(v1: Int) = v1 * 2\n}\n\nval tripleOdds: PartialFunction[Int, Int] = new PartialFunction[Int, Int] {\n  def isDefinedAt(x: Int) = x % 2 != 0\n\n  def apply(v1: Int) = v1 * 3\n}\n\nval whatToDo = doubleEvens orElse tripleOdds //Here we chain the partial functions together\n\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "9",
              "8"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Case statements are a quick way to create partial functions. When you create a case\n statement, the apply and isDefinedAt is created for you.",
            "code": "//The case statements are called case statements with guards\nval doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval whatToDo = doubleEvens orElse tripleOdds //Here we chain the partial functions together\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "9",
              "8"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "The result of partial functions can have an \\'andThen\\' function added to the end\n of the chain",
            "code": "//These are called case statements with guards\nval doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval addFive = (x: Int) => x + 5\nval whatToDo = doubleEvens orElse tripleOdds andThen addFive //Here we chain the partial functions together\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "14",
              "13"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "The result of partial functions can have an \\'andThen\\' function added to the end\n of the chain used to continue onto another chain of logic",
            "code": "val doubleEvens: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) == 0 => x * 2\n}\nval tripleOdds: PartialFunction[Int, Int] = {\n  case x: Int if (x % 2) != 0 => x * 3\n}\n\nval printEven: PartialFunction[Int, String] = {\n  case x: Int if (x % 2) == 0 => \"Even\"\n}\nval printOdd: PartialFunction[Int, String] = {\n  case x: Int if (x % 2) != 0 => \"Odd\"\n}\n\nval whatToDo = doubleEvens orElse tripleOdds andThen (printEven orElse printOdd)\n\nwhatToDo(3) should be(__)\nwhatToDo(4) should be(__)",
            "mode": "scala",
            "solutions": [
              "\"Odd\"",
              "\"Even\""
            ]
          }
        }
      ]
    },
    {
      "id": 37,
      "title": "Higher Order Functions",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "Meet lambda. Anonymous function",
            "code": "def lambda = { x: Int => x + 1 }\ndef lambda2 = (x:Int) => x + 1\nval lambda3 = (x:Int) => x + 1\n\nval lambda4 = new Function1[Int, Int] {\n  def apply(v1: Int): Int = v1 + 1\n}\n\ndef lambda5(x:Int) = x + 1\n\nval result = lambda(3)\nval `result1andhalf` = lambda.apply(3)\n\nval result2 = lambda2(3)\nval result3 = lambda3(3)\nval result4 = lambda4(3)\nval result5 = lambda5(3)\n\nresult should be(__)\nresult1andhalf should be(__)\nresult2 should be(__)\nresult3 should be(__)\nresult4 should be(__)\nresult5 should be(__)",
            "mode": "scala",
            "solutions": [
              "4",
              "4",
              "4",
              "4",
              "4",
              "4"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "An anonymous function can also take on a different look by taking out the brackets",
            "code": "def lambda = (x: Int) => x + 1\ndef result = lambda(5)\nresult should be(__)",
            "mode": "scala",
            "solutions": [
              "6"
            ]
          }
        },
        {
          "id": "koan3",
          "tag": "koan-task",
          "data": {
            "description": "Meet closure. Closure is any function that closes over the environment",
            "code": "var incrementer = 1\n\ndef closure = {\n  x: Int => x + incrementer\n}\n\nval result1 = closure(10)\nresult1 should be(__)\n\nincrementer = 2\n\nval result2 = closure(10)\nresult2 should be(__)",
            "mode": "scala",
            "solutions": [
              "11",
              "12"
            ]
          }
        },
        {
          "id": "koan4",
          "tag": "koan-task",
          "data": {
            "description": "We can take that closure and throw into a method and it will still hold the environment",
            "code": "def summation(x:Int, y: Int => Int) = y(x)\n\nvar incrementer = 1\ndef closure = (x: Int) => x + incrementer\n\nval result = summation(10, closure)\nresult should be(__)\n\nincrementer = 3\nval result2 = summation(10, closure)\nresult2 should be(__)",
            "mode": "scala",
            "solutions": [
              "11",
              "13"
            ]
          }
        },
        {
          "id": "koan5",
          "tag": "koan-task",
          "data": {
            "description": "function returning another function",
            "code": "def addWithoutSyntaxSugar(x: Int) = {\n  new Function1[Int, Int]() {\n    def apply(y: Int): Int = x + y\n  }\n}\naddWithoutSyntaxSugar(1).\n  isInstanceOf[Function1[Int,Int]] should be(__)\n\naddWithoutSyntaxSugar(2)(3) should be(__)\n\ndef fiveAdder = addWithoutSyntaxSugar(5)\nfiveAdder(5) should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "5",
              "10"
            ]
          }
        },
        {
          "id": "koan6",
          "tag": "koan-task",
          "data": {
            "description": "isInstanceOf is the same as instanceof in java, but in this case the parameter types can be\n 'blanked out' using existential types with is a single underline, since parameter type are unknown\n at runtime.",
            "code": "def addWithSyntaxSugar(x: Int) = (y:Int) => x + y\n\naddWithSyntaxSugar(1).isInstanceOf[Function1[Int, Int]] should be(__)",
            "mode": "scala",
            "solutions": [
              "true"
            ]
          }
        },
        {
          "id": "koan7",
          "tag": "koan-task",
          "data": {
            "description": "function taking another function as parameter. Helps in composing functions.\n Hint: a map method applies the function to each element of a list",
            "code": "def makeUpper(xs: List[String]) = xs map {_.toUpperCase}\n\ndef makeWhatEverYouLike(xs: List[String], sideEffect: String => String) = {\n  xs map sideEffect\n}\n\nmakeUpper(List(\"abc\", \"xyz\", \"123\")) should be(__)\n\nmakeWhatEverYouLike(List(\"ABC\", \"XYZ\", \"123\"), {\n  x => x.toLowerCase\n}) should be(__)\n\n//using it inline\nList(\"Scala\", \"Erlang\", \"Clojure\") map {_.length} should be(__)",
            "mode": "scala",
            "solutions": [
              "List(\"ABC\", \"XYZ\", \"123\")",
              "List(\"abc\", \"xyz\", \"123\")",
              "List(5, 6, 7)"
            ]
          }
        },
        {
          "id": "koan8",
          "tag": "koan-task",
          "data": {
            "description": "Currying is a technique to transform function with multiple parameters to function with one parameter",
            "code": "def multiply(x: Int, y: Int) = x * y\n(multiply _).isInstanceOf[Function2[_, _, _]] should be(__)\nval multiplyCurried = (multiply _).curried\nmultiply(4, 5) should be(__)\nmultiplyCurried(3)(2) should be(__)",
            "mode": "scala",
            "solutions": [
              "true",
              "20",
              "6"
            ]
          }
        },
        {
          "id": "koan9",
          "tag": "koan-task",
          "data": {
            "description": "Currying allows you to create specialized version of generalized function",
            "code": "def customFilter(f: Int => Boolean)(xs: List[Int]) = {\n  xs filter f\n}\ndef onlyEven(x: Int) = x % 2 == 0\nval xs = List(12, 11, 5, 20, 3, 13, 2)\ncustomFilter(onlyEven)(xs) should be(__)\n\nval onlyEvenFilter = customFilter(onlyEven) _\nonlyEvenFilter(xs) should be(__)",
            "mode": "scala",
            "solutions": [
              "List(12, 20, 2)",
              "List(12, 20, 2)"
            ]
          }
        }
      ]
    },
    {
      "id": 38,
      "title": "Partially applied Functions",
      "tasks": [
        {
          "id": "koan1",
          "tag": "koan-task",
          "data": {
            "description": "A partially applied function is a function that you do not apply any or all the\n arguments, creating another function. This partially applied function\n doesn't apply any arguments",
            "code": "def sum(a: Int, b: Int, c: Int) = a + b + c\nval sum3 = sum _\nsum3(1, 9, 7) should be(__)\nsum(4, 5, 6) should be(__)",
            "mode": "scala",
            "solutions": [
              "17",
              "15"
            ]
          }
        },
        {
          "id": "koan2",
          "tag": "koan-task",
          "data": {
            "description": "Partially applied functions can replace any number of arguments",
            "code": "def sum(a: Int, b: Int, c: Int) = a + b + c\nval sumC = sum(1, 10, _: Int)\nsumC(4) should be(__)\nsum(4, 5, 6) should be(__)",
            "mode": "scala",
            "solutions": [
              "15",
              "15"
            ]
          }
        }
      ]
    }
  ]
}
